.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_prem.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_prem.py:


PREM: Preliminary Reference Earth Model
=======================================

The Preliminary reference Earth model (PREM) [Dziewonsky1981]_ is a one-dimensional
model representing the average Earth properties as a function of planetary radius.  The
model includes the depth, density, seismic velocities, attenuation (Q) and anisotropic
parameter (:math:`\eta`) on the boundaries of several Earth layers.  The data is loaded
into :class:`pandas.DataFrame` objects, which can be used to plot and make computations.



.. image:: /gallery/images/sphx_glr_prem_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    radius   depth   density       Vpv  ...      Vsh      eta   Q_mu  Q_kappa
    0    6371.0     0.0   1.02000   1.45000  ...  0.00000  1.00000    0.0  57823.0
    1    6370.0     1.0   1.02000   1.45000  ...  0.00000  1.00000    0.0  57823.0
    2    6369.0     2.0   1.02000   1.45000  ...  0.00000  1.00000    0.0  57823.0
    3    6368.0     3.0   1.02000   1.45000  ...  0.00000  1.00000    0.0  57823.0
    4    6368.0     3.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    5    6367.0     4.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    6    6366.0     5.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    7    6365.0     6.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    8    6364.0     7.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    9    6363.0     8.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    10   6362.0     9.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    11   6361.0    10.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    12   6360.0    11.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    13   6359.0    12.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    14   6358.0    13.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    15   6357.0    14.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    16   6356.0    15.0   2.60000   5.80000  ...  3.20000  1.00000  600.0  57823.0
    17   6356.0    15.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    18   6355.0    16.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    19   6354.0    17.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    20   6353.0    18.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    21   6352.0    19.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    22   6351.0    20.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    23   6350.0    21.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    24   6349.0    22.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    25   6348.0    23.0   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    26   6346.6    24.4   2.90000   6.80000  ...  3.90000  1.00000  600.0  57823.0
    27   6346.6    24.4   3.38075   8.02206  ...  4.61180  0.90039  600.0  57823.0
    28   6346.0    25.0   3.38068   8.02138  ...  4.61126  0.90062  600.0  57823.0
    29   6345.0    26.0   3.38057   8.02024  ...  4.61037  0.90101  600.0  57823.0
    ..      ...     ...       ...       ...  ...      ...      ...    ...      ...
    169  2500.0  3871.0  11.19067   9.38422  ...  0.00000  1.00000    0.0  57823.0
    170  2400.0  3971.0  11.29298   9.48413  ...  0.00000  1.00000    0.0  57823.0
    171  2300.0  4071.0  11.39042   9.57885  ...  0.00000  1.00000    0.0  57823.0
    172  2221.5  4149.5  11.46358   9.64977  ...  0.00000  1.00000    0.0  57823.0
    173  2200.0  4171.0  11.48311   9.66869  ...  0.00000  1.00000    0.0  57823.0
    174  2100.0  4271.0  11.57119   9.75397  ...  0.00000  1.00000    0.0  57823.0
    175  2000.0  4371.0  11.65478   9.83500  ...  0.00000  1.00000    0.0  57823.0
    176  1900.0  4471.0  11.73401   9.91210  ...  0.00000  1.00000    0.0  57823.0
    177  1800.0  4571.0  11.80900   9.98558  ...  0.00000  1.00000    0.0  57823.0
    178  1700.0  4671.0  11.87989  10.05576  ...  0.00000  1.00000    0.0  57823.0
    179  1600.0  4771.0  11.94681  10.12295  ...  0.00000  1.00000    0.0  57823.0
    180  1500.0  4871.0  12.00988  10.18747  ...  0.00000  1.00000    0.0  57823.0
    181  1400.0  4971.0  12.06923  10.24963  ...  0.00000  1.00000    0.0  57823.0
    182  1300.0  5071.0  12.12499  10.30975  ...  0.00000  1.00000    0.0  57823.0
    183  1221.5  5149.5  12.16633  10.35572  ...  0.00000  1.00000    0.0  57823.0
    184  1221.5  5149.5  12.76361  11.02826  ...  3.50431  1.00000   84.6   1327.7
    185  1217.1  5153.9  12.76595  11.02994  ...  3.50549  1.00000   84.6   1327.7
    186  1200.0  5171.0  12.77495  11.03642  ...  3.51002  1.00000   84.6   1327.7
    187  1100.0  5271.0  12.82503  11.07249  ...  3.53522  1.00000   84.6   1327.7
    188  1000.0  5371.0  12.87076  11.10541  ...  3.55823  1.00000   84.6   1327.7
    189   900.0  5471.0  12.91213  11.13520  ...  3.57905  1.00000   84.6   1327.7
    190   800.0  5571.0  12.94914  11.16186  ...  3.59767  1.00000   84.6   1327.7
    191   700.0  5671.0  12.98181  11.18537  ...  3.61411  1.00000   84.6   1327.7
    192   600.0  5771.0  13.01011  11.20576  ...  3.62835  1.00000   84.6   1327.7
    193   500.0  5871.0  13.03406  11.22300  ...  3.64041  1.00000   84.6   1327.7
    194   400.0  5971.0  13.05366  11.23711  ...  3.65027  1.00000   84.6   1327.7
    195   300.0  6071.0  13.06890  11.24809  ...  3.65794  1.00000   84.6   1327.7
    196   200.0  6171.0  13.07979  11.25593  ...  3.66342  1.00000   84.6   1327.7
    197   100.0  6271.0  13.08632  11.26063  ...  3.66670  1.00000   84.6   1327.7
    198     0.0  6371.0  13.08850  11.26220  ...  3.66780  1.00000   84.6   1327.7

    [199 rows x 10 columns]




|


.. code-block:: default

    import rockhound as rh
    import matplotlib.pyplot as plt

    # Load PREM into a DataFrame
    prem = rh.fetch_prem()
    print(prem)

    # Plot density and velocities
    fig, axes = plt.subplots(1, 2, figsize=(9, 5), sharey=True)
    fig.suptitle("PREM: Preliminary Reference Earth Model")
    ax = axes[0]
    prem.plot("density", "depth", legend=False, ax=ax)
    ax.invert_yaxis()
    ax.set_xlabel("Density [g/cmÂ³]")
    ax.set_ylabel("Depth [km]")
    ax.grid()
    ax = axes[1]
    for velocity in ["Vpv", "Vph", "Vsv", "Vsh"]:
        prem.plot(velocity, "depth", legend=False, ax=ax, label=velocity)
    ax.grid()
    ax.legend()
    ax.set_xlabel("Velocity [km/s]")
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.359 seconds)


.. _sphx_glr_download_gallery_prem.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: prem.py <prem.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: prem.ipynb <prem.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
